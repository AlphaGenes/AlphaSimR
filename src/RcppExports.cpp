// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// AlphaFormatter
int AlphaFormatter();
RcppExport SEXP AlphaSimR_AlphaFormatter() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(AlphaFormatter());
    return rcpp_result_gen;
END_RCPP
}
// getGeno
arma::Mat<unsigned char> getGeno(const Rcpp::S4& pop, const Rcpp::S4& lociMap);
RcppExport SEXP AlphaSimR_getGeno(SEXP popSEXP, SEXP lociMapSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::S4& >::type pop(popSEXP);
    Rcpp::traits::input_parameter< const Rcpp::S4& >::type lociMap(lociMapSEXP);
    rcpp_result_gen = Rcpp::wrap(getGeno(pop, lociMap));
    return rcpp_result_gen;
END_RCPP
}
// pullSnpGeno
arma::imat pullSnpGeno(const Rcpp::S4& pop, int chip, const Rcpp::S4& simParam);
RcppExport SEXP AlphaSimR_pullSnpGeno(SEXP popSEXP, SEXP chipSEXP, SEXP simParamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::S4& >::type pop(popSEXP);
    Rcpp::traits::input_parameter< int >::type chip(chipSEXP);
    Rcpp::traits::input_parameter< const Rcpp::S4& >::type simParam(simParamSEXP);
    rcpp_result_gen = Rcpp::wrap(pullSnpGeno(pop, chip, simParam));
    return rcpp_result_gen;
END_RCPP
}
// pullQtlGeno
arma::imat pullQtlGeno(const Rcpp::S4& pop, int trait, const Rcpp::S4& simParam);
RcppExport SEXP AlphaSimR_pullQtlGeno(SEXP popSEXP, SEXP traitSEXP, SEXP simParamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::S4& >::type pop(popSEXP);
    Rcpp::traits::input_parameter< int >::type trait(traitSEXP);
    Rcpp::traits::input_parameter< const Rcpp::S4& >::type simParam(simParamSEXP);
    rcpp_result_gen = Rcpp::wrap(pullQtlGeno(pop, trait, simParam));
    return rcpp_result_gen;
END_RCPP
}
// getDomGeno
arma::imat getDomGeno(const arma::Mat<unsigned char>& geno);
RcppExport SEXP AlphaSimR_getDomGeno(SEXP genoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::Mat<unsigned char>& >::type geno(genoSEXP);
    rcpp_result_gen = Rcpp::wrap(getDomGeno(geno));
    return rcpp_result_gen;
END_RCPP
}
// calcQ2
arma::rowvec calcQ2(Rcpp::List& geno);
RcppExport SEXP AlphaSimR_calcQ2(SEXP genoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List& >::type geno(genoSEXP);
    rcpp_result_gen = Rcpp::wrap(calcQ2(geno));
    return rcpp_result_gen;
END_RCPP
}
// calcGvA
arma::vec calcGvA(const arma::Mat<unsigned char>& geno, const arma::vec& a, double intercept);
RcppExport SEXP AlphaSimR_calcGvA(SEXP genoSEXP, SEXP aSEXP, SEXP interceptSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::Mat<unsigned char>& >::type geno(genoSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type intercept(interceptSEXP);
    rcpp_result_gen = Rcpp::wrap(calcGvA(geno, a, intercept));
    return rcpp_result_gen;
END_RCPP
}
// getGvA
arma::vec getGvA(Rcpp::S4& trait, Rcpp::S4& pop);
RcppExport SEXP AlphaSimR_getGvA(SEXP traitSEXP, SEXP popSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4& >::type trait(traitSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4& >::type pop(popSEXP);
    rcpp_result_gen = Rcpp::wrap(getGvA(trait, pop));
    return rcpp_result_gen;
END_RCPP
}
// calcGvAD
arma::vec calcGvAD(const arma::Mat<unsigned char>& geno, const arma::vec& a, const arma::vec& d, double intercept);
RcppExport SEXP AlphaSimR_calcGvAD(SEXP genoSEXP, SEXP aSEXP, SEXP dSEXP, SEXP interceptSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::Mat<unsigned char>& >::type geno(genoSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type intercept(interceptSEXP);
    rcpp_result_gen = Rcpp::wrap(calcGvAD(geno, a, d, intercept));
    return rcpp_result_gen;
END_RCPP
}
// getGvAD
arma::vec getGvAD(Rcpp::S4& trait, Rcpp::S4& pop);
RcppExport SEXP AlphaSimR_getGvAD(SEXP traitSEXP, SEXP popSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4& >::type trait(traitSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4& >::type pop(popSEXP);
    rcpp_result_gen = Rcpp::wrap(getGvAD(trait, pop));
    return rcpp_result_gen;
END_RCPP
}
// calcGenParam
Rcpp::List calcGenParam(Rcpp::S4& trait, Rcpp::S4& pop, arma::vec a, arma::vec d);
RcppExport SEXP AlphaSimR_calcGenParam(SEXP traitSEXP, SEXP popSEXP, SEXP aSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4& >::type trait(traitSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4& >::type pop(popSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(calcGenParam(trait, pop, a, d));
    return rcpp_result_gen;
END_RCPP
}
// getHybridGvA
arma::vec getHybridGvA(const Rcpp::S4& trait, const Rcpp::S4& fPop, arma::uvec& fPar, const Rcpp::S4& mPop, arma::uvec& mPar);
RcppExport SEXP AlphaSimR_getHybridGvA(SEXP traitSEXP, SEXP fPopSEXP, SEXP fParSEXP, SEXP mPopSEXP, SEXP mParSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::S4& >::type trait(traitSEXP);
    Rcpp::traits::input_parameter< const Rcpp::S4& >::type fPop(fPopSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type fPar(fParSEXP);
    Rcpp::traits::input_parameter< const Rcpp::S4& >::type mPop(mPopSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type mPar(mParSEXP);
    rcpp_result_gen = Rcpp::wrap(getHybridGvA(trait, fPop, fPar, mPop, mPar));
    return rcpp_result_gen;
END_RCPP
}
// getHybridGvAD
arma::vec getHybridGvAD(const Rcpp::S4& trait, const Rcpp::S4& fPop, arma::uvec& fPar, const Rcpp::S4& mPop, arma::uvec& mPar);
RcppExport SEXP AlphaSimR_getHybridGvAD(SEXP traitSEXP, SEXP fPopSEXP, SEXP fParSEXP, SEXP mPopSEXP, SEXP mParSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::S4& >::type trait(traitSEXP);
    Rcpp::traits::input_parameter< const Rcpp::S4& >::type fPop(fPopSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type fPar(fParSEXP);
    Rcpp::traits::input_parameter< const Rcpp::S4& >::type mPop(mPopSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type mPar(mParSEXP);
    rcpp_result_gen = Rcpp::wrap(getHybridGvAD(trait, fPop, fPar, mPop, mPar));
    return rcpp_result_gen;
END_RCPP
}
// cross2
Rcpp::List cross2(const Rcpp::List& fGeno, arma::uvec fPar, const Rcpp::List& mGeno, arma::uvec mPar, const Rcpp::List& genMaps);
RcppExport SEXP AlphaSimR_cross2(SEXP fGenoSEXP, SEXP fParSEXP, SEXP mGenoSEXP, SEXP mParSEXP, SEXP genMapsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type fGeno(fGenoSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type fPar(fParSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type mGeno(mGenoSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type mPar(mParSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type genMaps(genMapsSEXP);
    rcpp_result_gen = Rcpp::wrap(cross2(fGeno, fPar, mGeno, mPar, genMaps));
    return rcpp_result_gen;
END_RCPP
}
// popVar
arma::mat popVar(arma::mat& X);
RcppExport SEXP AlphaSimR_popVar(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(popVar(X));
    return rcpp_result_gen;
END_RCPP
}
// readAF
arma::Mat<unsigned char> readAF(int nHap, int segSites, arma::ivec keep);
RcppExport SEXP AlphaSimR_readAF(SEXP nHapSEXP, SEXP segSitesSEXP, SEXP keepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nHap(nHapSEXP);
    Rcpp::traits::input_parameter< int >::type segSites(segSitesSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type keep(keepSEXP);
    rcpp_result_gen = Rcpp::wrap(readAF(nHap, segSites, keep));
    return rcpp_result_gen;
END_RCPP
}
// tuneTraitA
Rcpp::List tuneTraitA(arma::Mat<unsigned char>& geno, arma::vec& addEff, double varG);
RcppExport SEXP AlphaSimR_tuneTraitA(SEXP genoSEXP, SEXP addEffSEXP, SEXP varGSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<unsigned char>& >::type geno(genoSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type addEff(addEffSEXP);
    Rcpp::traits::input_parameter< double >::type varG(varGSEXP);
    rcpp_result_gen = Rcpp::wrap(tuneTraitA(geno, addEff, varG));
    return rcpp_result_gen;
END_RCPP
}
// tuneTraitAD
Rcpp::List tuneTraitAD(arma::Mat<unsigned char>& geno, arma::vec& addEff, arma::vec& domEff, double varG);
RcppExport SEXP AlphaSimR_tuneTraitAD(SEXP genoSEXP, SEXP addEffSEXP, SEXP domEffSEXP, SEXP varGSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<unsigned char>& >::type geno(genoSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type addEff(addEffSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type domEff(domEffSEXP);
    Rcpp::traits::input_parameter< double >::type varG(varGSEXP);
    rcpp_result_gen = Rcpp::wrap(tuneTraitAD(geno, addEff, domEff, varG));
    return rcpp_result_gen;
END_RCPP
}
